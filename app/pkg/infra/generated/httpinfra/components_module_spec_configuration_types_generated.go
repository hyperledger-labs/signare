// Code generated by Signare OpenAPI generator. DO NOT EDIT

package httpinfra

import (
	"bytes"
	"encoding/json"
	"fmt"

	"github.com/hyperledger-labs/signare/app/pkg/infra/httpinfra"
)

type ModuleSpecConfigurationHsmKind string

const (
	HsmKindSofthsm ModuleSpecConfigurationHsmKind = "softHSM"
)

// ModuleSpecConfiguration - struct for ModuleSpecConfiguration
type ModuleSpecConfiguration struct {
	HsmKind ModuleSpecConfigurationHsmKind `json:"hsmkind"`
	SoftHsm *SoftHsm                       `json:"softhsm,omitempty"`
}

// AsOneOf return as one of
func (oneOf *SoftHsm) AsOneOfModuleSpecConfiguration() ModuleSpecConfiguration {
	return ModuleSpecConfiguration{
		HsmKind: HsmKindSofthsm,
		SoftHsm: oneOf,
	}
}

// UnmarshalJSON data into one of the pointers in the struct
func (dst *ModuleSpecConfiguration) UnmarshalJSON(data []byte) *httpinfra.HTTPError {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	strictDecoder := json.NewDecoder(bytes.NewBuffer(data))
	strictDecoder.DisallowUnknownFields()
	err = strictDecoder.Decode(&jsonDict)
	if err != nil {
		httpError := httpinfra.NewHTTPError(httpinfra.StatusInvalidArgument)
		httpError.SetMessage("error unmarshalling JSON into map for the discriminator lookup")
		return httpError
	}

	// check if the discriminator value is 'softHSM'
	if jsonDict["hsmKind"] == string(HsmKindSofthsm) {
		dst.HsmKind = HsmKindSofthsm
		// try to unmarshal JSON data into SoftHsm
		err = json.Unmarshal(data, &dst.SoftHsm)
		if err == nil {
			return nil // data stored in dst.SoftHsm, return on the first match
		} else {
			dst.SoftHsm = nil
			httpError := httpinfra.NewHTTPError(httpinfra.StatusInvalidArgument)
			httpError.SetMessage("error unmarshalling ModuleSpecConfiguration as SoftHsm")
			return httpError
		}
	}

	return nil
}

// MarshalJSON data from the first non-nil pointers in the struct to JSON
func (src ModuleSpecConfiguration) MarshalJSON() ([]byte, error) {
	if src.SoftHsm != nil {
		return json.Marshal(&src.SoftHsm)
	}

	return nil, nil // no data in oneOf schemas
}

// GetActualInstance return the actual instance of ModuleSpecConfiguration
func (obj *ModuleSpecConfiguration) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}

	if obj.SoftHsm != nil {
		return obj.SoftHsm
	}

	// all schemas are nil
	return nil
}

func (data *ModuleSpecConfiguration) ValidateWith() (*httpinfra.ValidationResult, error) {
	if data.SoftHsm != nil {
		validatedSoftHsm, validateWithFailure := data.SoftHsm.ValidateWith()
		if validateWithFailure != nil {
			httpError := httpinfra.NewHTTPError(httpinfra.StatusInvalidArgument)
			httpError.SetMessage(fmt.Sprintf("error validating field [%v]", data.SoftHsm))
			return nil, httpError
		}
		if !validatedSoftHsm.Valid {
			return validatedSoftHsm, nil
		}
	}

	return &httpinfra.ValidationResult{
		Valid: true,
	}, nil
}

func (data *ModuleSpecConfiguration) SetDefaults() {
	instance := data.GetActualInstance()

	if i, ok := instance.(*SoftHsm); ok {
		i.SetDefaults()
	}
}
