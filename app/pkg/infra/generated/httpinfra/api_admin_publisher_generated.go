// Code generated by Signare OpenAPI generator. DO NOT EDIT

package httpinfra

import (
	"errors"
	"net/http"

	"github.com/hyperledger-labs/signare/app/pkg/infra/httpinfra"
)

// AdminAPIPublisherOptions options to create a AdminAPIRoutesPublished
type AdminAPIPublisherOptions struct {
	HTTPInfra httpinfra.HTTPRouter
	Handler   AdminAPIHTTPHandler
}

// AdminAPIRoutesPublished type for AdminAPI published routes
type AdminAPIRoutesPublished int

// ProvideAdminAPIRoutes creates a new AdminAPIRoutesPublished
func ProvideAdminAPIRoutes(options AdminAPIPublisherOptions) (AdminAPIRoutesPublished, error) {

	if options.HTTPInfra == nil {
		return 0, errors.New("missing mandatory HTTPInfra field to publish AdminAPI Routes")
	}

	if options.Handler == nil {
		return 0, errors.New("missing mandatory field Handler to publish AdminAPI Routes")
	}

	var err error

	err = PublishAdminApplicationsCreate(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminApplicationsDescribe(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminApplicationsEdit(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminApplicationsList(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminApplicationsRemove(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminModulesCreate(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminModulesDescribe(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminModulesEdit(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminModulesList(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminModulesRemove(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminSlotsCreate(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminSlotsDescribe(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminSlotsList(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminSlotsRemove(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminSlotsUpdatePin(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminUsersCreate(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminUsersDescribe(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminUsersEdit(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminUsersList(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}
	err = PublishAdminUsersRemove(options.HTTPInfra, options.Handler)
	if err != nil {
		return 0, err
	}

	return 0, nil
}

// PublishAdminApplicationsCreate publishes the AdminApplicationsCreate endpoint
func PublishAdminApplicationsCreate(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/applications", Methods: []string{
		http.MethodPost,
	},
		Action: "admin.applications.create",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminApplicationsCreate)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminApplicationsDescribe publishes the AdminApplicationsDescribe endpoint
func PublishAdminApplicationsDescribe(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/applications/{applicationId}", Methods: []string{
		http.MethodGet,
	},
		Action: "admin.applications.describe",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminApplicationsDescribe)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminApplicationsEdit publishes the AdminApplicationsEdit endpoint
func PublishAdminApplicationsEdit(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/applications/{applicationId}", Methods: []string{
		http.MethodPut,
	},
		Action: "admin.applications.edit",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminApplicationsEdit)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminApplicationsList publishes the AdminApplicationsList endpoint
func PublishAdminApplicationsList(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/applications", Methods: []string{
		http.MethodGet,
	},
		Action: "admin.applications.list",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminApplicationsList)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminApplicationsRemove publishes the AdminApplicationsRemove endpoint
func PublishAdminApplicationsRemove(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/applications/{applicationId}", Methods: []string{
		http.MethodDelete,
	},
		Action: "admin.applications.remove",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminApplicationsRemove)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminModulesCreate publishes the AdminModulesCreate endpoint
func PublishAdminModulesCreate(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/modules", Methods: []string{
		http.MethodPost,
	},
		Action: "admin.modules.create",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminModulesCreate)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminModulesDescribe publishes the AdminModulesDescribe endpoint
func PublishAdminModulesDescribe(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/modules/{moduleId}", Methods: []string{
		http.MethodGet,
	},
		Action: "admin.modules.describe",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminModulesDescribe)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminModulesEdit publishes the AdminModulesEdit endpoint
func PublishAdminModulesEdit(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/modules/{moduleId}", Methods: []string{
		http.MethodPut,
	},
		Action: "admin.modules.edit",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminModulesEdit)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminModulesList publishes the AdminModulesList endpoint
func PublishAdminModulesList(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/modules", Methods: []string{
		http.MethodGet,
	},
		Action: "admin.modules.list",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminModulesList)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminModulesRemove publishes the AdminModulesRemove endpoint
func PublishAdminModulesRemove(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/modules/{moduleId}", Methods: []string{
		http.MethodDelete,
	},
		Action: "admin.modules.remove",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminModulesRemove)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminSlotsCreate publishes the AdminSlotsCreate endpoint
func PublishAdminSlotsCreate(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/modules/{moduleId}/slots", Methods: []string{
		http.MethodPost,
	},
		Action: "admin.slots.create",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminSlotsCreate)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminSlotsDescribe publishes the AdminSlotsDescribe endpoint
func PublishAdminSlotsDescribe(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/modules/{moduleId}/slots/{slotId}", Methods: []string{
		http.MethodGet,
	},
		Action: "admin.slots.describe",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminSlotsDescribe)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminSlotsList publishes the AdminSlotsList endpoint
func PublishAdminSlotsList(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/modules/{moduleId}/slots", Methods: []string{
		http.MethodGet,
	},
		Action: "admin.slots.list",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminSlotsList)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminSlotsRemove publishes the AdminSlotsRemove endpoint
func PublishAdminSlotsRemove(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/modules/{moduleId}/slots/{slotId}", Methods: []string{
		http.MethodDelete,
	},
		Action: "admin.slots.remove",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminSlotsRemove)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminSlotsUpdatePin publishes the AdminSlotsUpdatePin endpoint
func PublishAdminSlotsUpdatePin(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/modules/{moduleId}/slots/{slotId}:update-pin", Methods: []string{
		http.MethodPost,
	},
		Action: "admin.slots.updatePin",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminSlotsUpdatePin)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminUsersCreate publishes the AdminUsersCreate endpoint
func PublishAdminUsersCreate(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/users", Methods: []string{
		http.MethodPost,
	},
		Action: "admin.users.create",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminUsersCreate)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminUsersDescribe publishes the AdminUsersDescribe endpoint
func PublishAdminUsersDescribe(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/users/{adminUserId}", Methods: []string{
		http.MethodGet,
	},
		Action: "admin.users.describe",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminUsersDescribe)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminUsersEdit publishes the AdminUsersEdit endpoint
func PublishAdminUsersEdit(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/users/{adminUserId}", Methods: []string{
		http.MethodPut,
	},
		Action: "admin.users.edit",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminUsersEdit)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminUsersList publishes the AdminUsersList endpoint
func PublishAdminUsersList(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/users", Methods: []string{
		http.MethodGet,
	},
		Action: "admin.users.list",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminUsersList)
	if err != nil {
		return err
	}
	return nil
}

// PublishAdminUsersRemove publishes the AdminUsersRemove endpoint
func PublishAdminUsersRemove(httpInfra httpinfra.HTTPRouter, handler AdminAPIHTTPHandler) error {
	opts := httpinfra.HandlerMatchOptions{Path: "/admin/users/{adminUserId}", Methods: []string{
		http.MethodDelete,
	},
		Action: "admin.users.remove",
	}
	err := httpInfra.RegisterRawHandler(opts, handler.HandleHTTPAdminUsersRemove)
	if err != nil {
		return err
	}
	return nil
}
