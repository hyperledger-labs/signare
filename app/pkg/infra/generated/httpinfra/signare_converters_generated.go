// Code generated by Signare OpenAPI generator. DO NOT EDIT

package httpinfra

import (
	"fmt"
	"strconv"

	"github.com/hyperledger-labs/signare/app/pkg/infra/httpinfra"
)

func toInt32(src string, fieldName string) (int32, *httpinfra.HTTPError) {
	if src == "" {
		return 0, nil
	}
	value, err := strconv.Atoi(src)
	if err != nil {
		httpError := httpinfra.NewHTTPError(httpinfra.StatusInvalidArgument)
		httpError.SetMessage(fmt.Sprintf("%s field value is not a number. Received [%s]", fieldName, src))
		return 0, httpError
	}
	return int32(value), nil
}

func toInt64(src string, fieldName string) (int64, *httpinfra.HTTPError) {
	if src == "" {
		return 0, nil
	}
	value, err := strconv.ParseInt(src, 10, 64)
	if err != nil {
		httpError := httpinfra.NewHTTPError(httpinfra.StatusInvalidArgument)
		httpError.SetMessage(fmt.Sprintf("%s field value is not a valid 64 bit number. Received [%s]", fieldName, src))
		return 0, httpError
	}
	return value, nil
}

func toBool(src string, fieldName string) (*bool, *httpinfra.HTTPError) {
	if src == "" {
		return nil, nil
	} else if src == "true" {
		boolToReturn := true
		return &boolToReturn, nil
	} else if src == "false" {
		boolToReturn := false
		return &boolToReturn, nil
	}
	httpError := httpinfra.NewHTTPError(httpinfra.StatusInvalidArgument)
	httpError.SetMessage(fmt.Sprintf("%s field value is not a bool value. Received [%s]", fieldName, src))
	return nil, httpError
}

func contains(array []string, str string) bool {
	for _, item := range array {
		if item == str {
			return true
		}
	}
	return false
}
