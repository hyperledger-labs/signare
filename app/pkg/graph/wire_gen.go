// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package graph

import (
	"errors"
	"fmt"
	"os"
	"strings"

	"github.com/google/wire"
	"github.com/hyperledger-labs/signare/app"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/httpin"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/httpmiddlewarein/pepin"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/metricsout"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/rpcin"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/storage/infile/pipinfile"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/storage/infile/roleinfile"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/storage/postgres/accountdbout"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/storage/postgres/admindbout"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/storage/postgres/applicationdbout"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/storage/postgres/hsmdbout"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/storage/postgres/hsmslotdbout"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/storage/postgres/referentialintegritydbout"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/storage/postgres/userdbout"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/storage/transactionaldbout"
	"github.com/hyperledger-labs/signare/app/pkg/adapters/usecaseadapters/pip"
	"github.com/hyperledger-labs/signare/app/pkg/commons/logger"
	"github.com/hyperledger-labs/signare/app/pkg/commons/metricrecorder"
	"github.com/hyperledger-labs/signare/app/pkg/commons/persistence"
	"github.com/hyperledger-labs/signare/app/pkg/commons/persistence/sql"
	"github.com/hyperledger-labs/signare/app/pkg/commons/time"
	"github.com/hyperledger-labs/signare/app/pkg/entities"
	"github.com/hyperledger-labs/signare/app/pkg/infra/generated/httpinfra"
	httpinfra2 "github.com/hyperledger-labs/signare/app/pkg/infra/httpinfra"
	"github.com/hyperledger-labs/signare/app/pkg/infra/metricshttpinfra"
	"github.com/hyperledger-labs/signare/app/pkg/infra/middleware"
	"github.com/hyperledger-labs/signare/app/pkg/infra/middleware/authentication"
	"github.com/hyperledger-labs/signare/app/pkg/infra/middleware/authentication/contextdefinition"
	"github.com/hyperledger-labs/signare/app/pkg/infra/middleware/authentication/contextdefinition/httpcontextdefinition"
	"github.com/hyperledger-labs/signare/app/pkg/infra/middleware/authentication/contextdefinition/rpccontextdefinition"
	"github.com/hyperledger-labs/signare/app/pkg/infra/middleware/authentication/contextvalidation"
	"github.com/hyperledger-labs/signare/app/pkg/infra/middleware/authorization"
	"github.com/hyperledger-labs/signare/app/pkg/infra/middleware/authorization/pep"
	"github.com/hyperledger-labs/signare/app/pkg/infra/middleware/entrypoint/rpcbatchrequestsupport"
	"github.com/hyperledger-labs/signare/app/pkg/infra/middleware/telemetry"
	"github.com/hyperledger-labs/signare/app/pkg/infra/middleware/telemetry/tracer"
	"github.com/hyperledger-labs/signare/app/pkg/infra/requestcontext"
	"github.com/hyperledger-labs/signare/app/pkg/infra/rpcinfra"
	"github.com/hyperledger-labs/signare/app/pkg/infra/storage/accountdb"
	"github.com/hyperledger-labs/signare/app/pkg/infra/storage/admindb"
	"github.com/hyperledger-labs/signare/app/pkg/infra/storage/applicationdb"
	"github.com/hyperledger-labs/signare/app/pkg/infra/storage/hsmmoduledb"
	"github.com/hyperledger-labs/signare/app/pkg/infra/storage/hsmslotdb"
	"github.com/hyperledger-labs/signare/app/pkg/infra/storage/referentialintegritydb"
	"github.com/hyperledger-labs/signare/app/pkg/infra/storage/userdb"
	"github.com/hyperledger-labs/signare/app/pkg/usecases/admin"
	"github.com/hyperledger-labs/signare/app/pkg/usecases/application"
	"github.com/hyperledger-labs/signare/app/pkg/usecases/authorization/pdp"
	"github.com/hyperledger-labs/signare/app/pkg/usecases/authorization/role"
	"github.com/hyperledger-labs/signare/app/pkg/usecases/hsmconnection"
	"github.com/hyperledger-labs/signare/app/pkg/usecases/hsmconnector"
	"github.com/hyperledger-labs/signare/app/pkg/usecases/hsmmodule"
	"github.com/hyperledger-labs/signare/app/pkg/usecases/hsmslot"
	"github.com/hyperledger-labs/signare/app/pkg/usecases/referentialintegrity"
	"github.com/hyperledger-labs/signare/app/pkg/usecases/transactionalmanager"
	"github.com/hyperledger-labs/signare/app/pkg/usecases/user"
)

// Injectors from http_api_injector.go:

func initializeHTTPAPI(useCases *useCasesGraph, infra *infraGraph) (*httpAPIGraph, error) {
	defaultHTTPRouter := provideMainRouter(infra)
	applicationUseCase := useCases.ApplicationUseCase
	adminUseCase := useCases.AdminUseCase
	hsmModuleUseCase := useCases.HSMModuleUseCase
	hsmSlotUseCase := useCases.HSMSlotUseCase
	defaultAdminAPIAdapterOptions := httpin.DefaultAdminAPIAdapterOptions{
		ApplicationUseCase: applicationUseCase,
		AdminUseCase:       adminUseCase,
		HSMUseCase:         hsmModuleUseCase,
		HSMSlotUseCase:     hsmSlotUseCase,
	}
	defaultAdminAPIAdapter, err := httpin.ProvideDefaultAdminAPIAdapter(defaultAdminAPIAdapterOptions)
	if err != nil {
		return nil, err
	}
	httpResponseHandler := infra.httpAPIResponseHandler
	defaultAdminAPIHTTPHandlerOptions := httpinfra.DefaultAdminAPIHTTPHandlerOptions{
		Adapter:         defaultAdminAPIAdapter,
		ResponseHandler: httpResponseHandler,
	}
	defaultAdminAPIHTTPHandler, err := httpinfra.NewDefaultAdminAPIHTTPHandler(defaultAdminAPIHTTPHandlerOptions)
	if err != nil {
		return nil, err
	}
	adminAPIPublisherOptions := httpinfra.AdminAPIPublisherOptions{
		HTTPInfra: defaultHTTPRouter,
		Handler:   defaultAdminAPIHTTPHandler,
	}
	adminAPIRoutesPublished, err := httpinfra.ProvideAdminAPIRoutes(adminAPIPublisherOptions)
	if err != nil {
		return nil, err
	}
	userUseCase := useCases.UserUseCase
	defaultApplicationAPIAdapterOptions := httpin.DefaultApplicationAPIAdapterOptions{
		UserUseCase: userUseCase,
	}
	defaultApplicationAPIAdapter, err := httpin.ProvideDefaultApplicationAPIAdapter(defaultApplicationAPIAdapterOptions)
	if err != nil {
		return nil, err
	}
	defaultApplicationAPIHTTPHandlerOptions := httpinfra.DefaultApplicationAPIHTTPHandlerOptions{
		Adapter:         defaultApplicationAPIAdapter,
		ResponseHandler: httpResponseHandler,
	}
	defaultApplicationAPIHTTPHandler, err := httpinfra.NewDefaultApplicationAPIHTTPHandler(defaultApplicationAPIHTTPHandlerOptions)
	if err != nil {
		return nil, err
	}
	applicationAPIPublisherOptions := httpinfra.ApplicationAPIPublisherOptions{
		HTTPInfra: defaultHTTPRouter,
		Handler:   defaultApplicationAPIHTTPHandler,
	}
	applicationAPIRoutesPublished, err := httpinfra.ProvideApplicationAPIRoutes(applicationAPIPublisherOptions)
	if err != nil {
		return nil, err
	}
	defaultRPCRouter := infra.rpcRouter
	accountUseCase := useCases.AccountUseCase
	resolver := useCases.HSMConnectionResolver
	hsmConnector := useCases.HSMConnector
	defaultAPIAdapterOptions := rpcin.DefaultAPIAdapterOptions{
		AccountUseCase:        accountUseCase,
		HSMConnectionResolver: resolver,
		HSMConnector:          hsmConnector,
	}
	defaultAPIAdapter, err := rpcin.NewDefaultAPIAdapter(defaultAPIAdapterOptions)
	if err != nil {
		return nil, err
	}
	defaultJSONRPCAPIHandlerOptions := rpcinfra.DefaultJSONRPCAPIHandlerOptions{
		Adapter: defaultAPIAdapter,
	}
	defaultJSONRPCAPIHandler, err := rpcinfra.NewDefaultJSONRPCAPIHandler(defaultJSONRPCAPIHandlerOptions)
	if err != nil {
		return nil, err
	}
	jsonrpcapiPublisherOptions := rpcinfra.JSONRPCAPIPublisherOptions{
		RPCRouter: defaultRPCRouter,
		Handler:   defaultJSONRPCAPIHandler,
	}
	jsonrpcapiRoutesPublished, err := rpcinfra.ProvideJSONRPCMethods(jsonrpcapiPublisherOptions)
	if err != nil {
		return nil, err
	}
	graphHttpAPIGraph := &httpAPIGraph{
		adminAPIRoutesPublished:       adminAPIRoutesPublished,
		applicationAPIRoutesPublished: applicationAPIRoutesPublished,
		rpcAPIRoutesPublished:         jsonrpcapiRoutesPublished,
	}
	return graphHttpAPIGraph, nil
}

// Injectors from infra_injector.go:

func initializeInfra(metricRecorder metricrecorder.MetricRecorder) (*infraGraph, error) {
	defaultHTTPMetricsOptions := httpinfra2.DefaultHTTPMetricsOptions{
		MetricRecorder: metricRecorder,
	}
	defaultHTTPMetrics, err := httpinfra2.ProvideDefaultHTTPMetrics(defaultHTTPMetricsOptions)
	if err != nil {
		return nil, err
	}
	defaultHTTPResponseHandlerOptions := httpinfra2.DefaultHTTPResponseHandlerOptions{
		HTTPMetrics: defaultHTTPMetrics,
	}
	defaultHTTPResponseHandler, err := httpinfra2.ProvideDefaultHTTPResponseHandler(defaultHTTPResponseHandlerOptions)
	if err != nil {
		return nil, err
	}
	defaultRPCInfraResponseHandlerOptions := rpcinfra.DefaultRPCInfraResponseHandlerOptions{
		HTTPMetrics: defaultHTTPMetrics,
	}
	defaultRPCInfraResponseHandler, err := rpcinfra.ProvideDefaultRPCInfraResponseHandler(defaultRPCInfraResponseHandlerOptions)
	if err != nil {
		return nil, err
	}
	defaultHTTPRouter := httpinfra2.ProvideHTTPRouter()
	metricsHTTPRouter := httpinfra2.ProvideMetricsHTTPRouter()
	defaultRPCRouterOptions := rpcinfra.DefaultRPCRouterOptions{
		DefaultRPCInfraResponseHandler: defaultRPCInfraResponseHandler,
		HTTPMetrics:                    defaultHTTPMetrics,
	}
	defaultRPCRouter := rpcinfra.ProvideDefaultRPCRouter(defaultRPCRouterOptions)
	graphInfraGraph := &infraGraph{
		httpAPIResponseHandler:         defaultHTTPResponseHandler,
		defaultRPCInfraResponseHandler: defaultRPCInfraResponseHandler,
		mainHTTPRouter:                 defaultHTTPRouter,
		metricsHTTPRouter:              metricsHTTPRouter,
		rpcRouter:                      defaultRPCRouter,
	}
	return graphInfraGraph, nil
}

// Injectors from libraries_injector.go:

func initializeLibraries(config Config) (*librariesGraph, error) {
	graphPersistenceFwConfigOptions := persistenceFwConfigOptions{
		config: config,
	}
	connection, err := providePersistenceFwConnection(graphPersistenceFwConfigOptions)
	if err != nil {
		return nil, err
	}
	fwOptions, err := providePersistenceFwConfig(connection, graphPersistenceFwConfigOptions)
	if err != nil {
		return nil, err
	}
	storage, err := providePersistenceFramework(connection, fwOptions)
	if err != nil {
		return nil, err
	}
	graphLibrariesGraph := &librariesGraph{
		persistenceFramework:  storage,
		persistenceConnection: connection,
	}
	return graphLibrariesGraph, nil
}

// Injectors from metrics_injector.go:

func initializePrometheusMetrics(config Config) (*prometheusMetricsGraph, error) {
	prometheusNamespace := providePrometheusNamespace(config)
	prometheusMetricsRecorderAdapterOptions := metricsout.PrometheusMetricsRecorderAdapterOptions{
		Namespace: prometheusNamespace,
	}
	prometheusMetricsRecorderAdapter, err := metricsout.ProvidePrometheusMetricsRecorderAdapter(prometheusMetricsRecorderAdapterOptions)
	if err != nil {
		return nil, err
	}
	defaultMetricRecorderOptions := metricrecorder.DefaultMetricRecorderOptions{
		MetricsRecorderAdapter: prometheusMetricsRecorderAdapter,
	}
	defaultMetricRecorder, err := metricrecorder.ProvideDefaultMetricRecorder(defaultMetricRecorderOptions)
	if err != nil {
		return nil, err
	}
	graphPrometheusMetricsGraph := &prometheusMetricsGraph{
		metricRecorderAdapter: prometheusMetricsRecorderAdapter,
		metricRecorder:        defaultMetricRecorder,
	}
	return graphPrometheusMetricsGraph, nil
}

func InitializeDummyMetrics() (*dummyMetricsGraph, error) {
	noMetricsRecorder := metricrecorder.NewNoMetricsRecorder()
	graphDummyMetricsGraph := &dummyMetricsGraph{
		metricRecorder: noMetricsRecorder,
	}
	return graphDummyMetricsGraph, nil
}

// Injectors from middleware_injector.go:

func initializeHTTPMiddleware(infra *infraGraph, useCases *useCasesGraph, metricRecorder metricrecorder.MetricRecorder, configuration contextdefinition.AuthHeadersConfiguration) (*httpMiddlewareGraph, error) {
	defaultHTTPRouter := infra.mainHTTPRouter
	httpContextDefinitionOptions := httpcontextdefinition.HTTPContextDefinitionOptions{
		AuthHeadersConfiguration: configuration,
		HTTPRouter:               defaultHTTPRouter,
	}
	httpContextDefinition, err := httpcontextdefinition.ProvideHTTPContextDefinition(httpContextDefinitionOptions)
	if err != nil {
		return nil, err
	}
	httpResponseHandler := infra.httpAPIResponseHandler
	requestContextValidationOptions := contextvalidation.RequestContextValidationOptions{
		ResponseHandler: httpResponseHandler,
	}
	requestContextValidation, err := contextvalidation.ProvideRequestContextValidation(requestContextValidationOptions)
	if err != nil {
		return nil, err
	}
	authenticationMiddlewareOptions := authentication.AuthenticationMiddlewareOptions{
		ContextDefinition:        httpContextDefinition,
		RequestContextValidation: requestContextValidation,
	}
	authenticationMiddleware, err := authentication.ProvideAuthenticationMiddleware(authenticationMiddlewareOptions)
	if err != nil {
		return nil, err
	}
	accountUseCase := useCases.AccountUseCase
	defaultAccountsPIPAdapterOptions := pip.DefaultAccountsPIPAdapterOptions{
		AccountUseCase: accountUseCase,
	}
	defaultAccountsPIPAdapter, err := pip.ProvideDefaultAccountsPIPAdapter(defaultAccountsPIPAdapterOptions)
	if err != nil {
		return nil, err
	}
	defaultRBACActionsPolicyInformationPointYAMLOutputAdapter := ProvidePolicyInformationPointYAMLOutputAdapter()
	adminUseCase := useCases.AdminUseCase
	defaultAdminsPIPAdapterOptions := pip.DefaultAdminsPIPAdapterOptions{
		AdminUseCase: adminUseCase,
	}
	defaultAdminsPIPAdapter, err := pip.ProvideDefaultAdminsPIPAdapter(defaultAdminsPIPAdapterOptions)
	if err != nil {
		return nil, err
	}
	userUseCase := useCases.UserUseCase
	defaultUsersPIPAdapterOptions := pip.DefaultUsersPIPAdapterOptions{
		UserUseCase: userUseCase,
	}
	defaultUsersPIPAdapter, err := pip.ProvideDefaultUsersPIPAdapter(defaultUsersPIPAdapterOptions)
	if err != nil {
		return nil, err
	}
	defaultPolicyDecisionPointUseCaseOptions := pdp.DefaultPolicyDecisionPointUseCaseOptions{
		AccountsPolicyInformationAdapter:  defaultAccountsPIPAdapter,
		ActionsPolicyInformationPointPort: defaultRBACActionsPolicyInformationPointYAMLOutputAdapter,
		AdminsPolicyInformationAdapter:    defaultAdminsPIPAdapter,
		UsersPolicyInformationAdapter:     defaultUsersPIPAdapter,
	}
	defaultPolicyDecisionPointUseCase, err := pdp.ProvideDefaultPolicyDecisionPointUseCase(defaultPolicyDecisionPointUseCaseOptions)
	if err != nil {
		return nil, err
	}
	defaultUserPolicyDecisionPointAdapterOptions := pepin.DefaultUserPolicyDecisionPointAdapterOptions{
		DefaultPolicyDecisionPoint: defaultPolicyDecisionPointUseCase,
	}
	defaultUserPolicyDecisionPointAdapter, err := pepin.ProvideUserPolicyDecisionPointAdapter(defaultUserPolicyDecisionPointAdapterOptions)
	if err != nil {
		return nil, err
	}
	defaultAccountUserPolicyDecisionPointAdapterOptions := pepin.DefaultAccountUserPolicyDecisionPointAdapterOptions{
		DefaultPolicyDecisionPointUseCase: defaultPolicyDecisionPointUseCase,
	}
	defaultAccountUserPolicyDecisionPointAdapter, err := pepin.ProvideDefaultAccountUserPolicyDecisionPointAdapter(defaultAccountUserPolicyDecisionPointAdapterOptions)
	if err != nil {
		return nil, err
	}
	httpPolicyEnforcementPointOptions := pep.HTTPPolicyEnforcementPointOptions{
		ResponseHandler:                       httpResponseHandler,
		UserPolicyDecisionPointAdapter:        defaultUserPolicyDecisionPointAdapter,
		AccountUserPolicyDecisionPointAdapter: defaultAccountUserPolicyDecisionPointAdapter,
	}
	httpPolicyEnforcementPoint, err := pep.ProvideHTTPPolicyEnforcementPoint(httpPolicyEnforcementPointOptions)
	if err != nil {
		return nil, err
	}
	rpcPolicyEnforcementPointOptions := pep.RPCPolicyEnforcementPointOptions{
		ResponseHandler:                       httpResponseHandler,
		UserPolicyDecisionPointAdapter:        defaultUserPolicyDecisionPointAdapter,
		AccountUserPolicyDecisionPointAdapter: defaultAccountUserPolicyDecisionPointAdapter,
	}
	rpcPolicyEnforcementPoint, err := pep.ProvideRPCPolicyEnforcementPoint(rpcPolicyEnforcementPointOptions)
	if err != nil {
		return nil, err
	}
	authorizationMiddlewareOptions := authorization.AuthorizationMiddlewareOptions{
		HTTPPolicyEnforcementPoint: httpPolicyEnforcementPoint,
		RPCPolicyEnforcementPoint:  rpcPolicyEnforcementPoint,
	}
	authorizationMiddleware, err := authorization.ProvideAuthorizationMiddleware(authorizationMiddlewareOptions)
	if err != nil {
		return nil, err
	}
	httpContextTracerOptions := tracer.HTTPContextTracerOptions{}
	httpContextTracer, err := tracer.ProvideHTTPContextTracer(httpContextTracerOptions)
	if err != nil {
		return nil, err
	}
	telemetryMiddlewareOptions := telemetry.TelemetryMiddlewareOptions{
		HTTPContextTracer: httpContextTracer,
	}
	telemetryMiddleware, err := telemetry.ProvideTelemetryMiddleware(telemetryMiddlewareOptions)
	if err != nil {
		return nil, err
	}
	httpMiddlewareFactoryOptions := middleware.HTTPMiddlewareFactoryOptions{
		AuthenticationMiddleware: authenticationMiddleware,
		AuthorizationMiddleware:  authorizationMiddleware,
		TelemetryMiddleware:      telemetryMiddleware,
	}
	httpMiddlewareFactory, err := middleware.ProvideHTTPMiddlewareFactory(httpMiddlewareFactoryOptions)
	if err != nil {
		return nil, err
	}
	graphHttpMiddlewareGraph := &httpMiddlewareGraph{
		HTTPMiddlewareFactory: httpMiddlewareFactory,
	}
	return graphHttpMiddlewareGraph, nil
}

func initializeRPCMiddleware(infra *infraGraph, useCases *useCasesGraph, metricRecorder metricrecorder.MetricRecorder, configuration contextdefinition.AuthHeadersConfiguration) (*rpcMiddlewareGraph, error) {
	defaultRPCInfraResponseHandler := infra.defaultRPCInfraResponseHandler
	defaultRPCRouter := infra.rpcRouter
	rpcContextDefinitionOptions := rpccontextdefinition.RPCContextDefinitionOptions{
		AuthHeadersConfiguration: configuration,
		ResponseHandler:          defaultRPCInfraResponseHandler,
		RPCRouter:                defaultRPCRouter,
	}
	rpcContextDefinition, err := rpccontextdefinition.ProvideRPCContextDefinitionFromHeaders(rpcContextDefinitionOptions)
	if err != nil {
		return nil, err
	}
	requestContextValidationOptions := contextvalidation.RequestContextValidationOptions{
		ResponseHandler: defaultRPCInfraResponseHandler,
	}
	requestContextValidation, err := contextvalidation.ProvideRequestContextValidation(requestContextValidationOptions)
	if err != nil {
		return nil, err
	}
	authenticationMiddlewareOptions := authentication.AuthenticationMiddlewareOptions{
		ContextDefinition:        rpcContextDefinition,
		RequestContextValidation: requestContextValidation,
	}
	authenticationMiddleware, err := authentication.ProvideAuthenticationMiddleware(authenticationMiddlewareOptions)
	if err != nil {
		return nil, err
	}
	accountUseCase := useCases.AccountUseCase
	defaultAccountsPIPAdapterOptions := pip.DefaultAccountsPIPAdapterOptions{
		AccountUseCase: accountUseCase,
	}
	defaultAccountsPIPAdapter, err := pip.ProvideDefaultAccountsPIPAdapter(defaultAccountsPIPAdapterOptions)
	if err != nil {
		return nil, err
	}
	defaultRBACActionsPolicyInformationPointYAMLOutputAdapter := ProvidePolicyInformationPointYAMLOutputAdapter()
	adminUseCase := useCases.AdminUseCase
	defaultAdminsPIPAdapterOptions := pip.DefaultAdminsPIPAdapterOptions{
		AdminUseCase: adminUseCase,
	}
	defaultAdminsPIPAdapter, err := pip.ProvideDefaultAdminsPIPAdapter(defaultAdminsPIPAdapterOptions)
	if err != nil {
		return nil, err
	}
	userUseCase := useCases.UserUseCase
	defaultUsersPIPAdapterOptions := pip.DefaultUsersPIPAdapterOptions{
		UserUseCase: userUseCase,
	}
	defaultUsersPIPAdapter, err := pip.ProvideDefaultUsersPIPAdapter(defaultUsersPIPAdapterOptions)
	if err != nil {
		return nil, err
	}
	defaultPolicyDecisionPointUseCaseOptions := pdp.DefaultPolicyDecisionPointUseCaseOptions{
		AccountsPolicyInformationAdapter:  defaultAccountsPIPAdapter,
		ActionsPolicyInformationPointPort: defaultRBACActionsPolicyInformationPointYAMLOutputAdapter,
		AdminsPolicyInformationAdapter:    defaultAdminsPIPAdapter,
		UsersPolicyInformationAdapter:     defaultUsersPIPAdapter,
	}
	defaultPolicyDecisionPointUseCase, err := pdp.ProvideDefaultPolicyDecisionPointUseCase(defaultPolicyDecisionPointUseCaseOptions)
	if err != nil {
		return nil, err
	}
	defaultUserPolicyDecisionPointAdapterOptions := pepin.DefaultUserPolicyDecisionPointAdapterOptions{
		DefaultPolicyDecisionPoint: defaultPolicyDecisionPointUseCase,
	}
	defaultUserPolicyDecisionPointAdapter, err := pepin.ProvideUserPolicyDecisionPointAdapter(defaultUserPolicyDecisionPointAdapterOptions)
	if err != nil {
		return nil, err
	}
	defaultAccountUserPolicyDecisionPointAdapterOptions := pepin.DefaultAccountUserPolicyDecisionPointAdapterOptions{
		DefaultPolicyDecisionPointUseCase: defaultPolicyDecisionPointUseCase,
	}
	defaultAccountUserPolicyDecisionPointAdapter, err := pepin.ProvideDefaultAccountUserPolicyDecisionPointAdapter(defaultAccountUserPolicyDecisionPointAdapterOptions)
	if err != nil {
		return nil, err
	}
	httpPolicyEnforcementPointOptions := pep.HTTPPolicyEnforcementPointOptions{
		ResponseHandler:                       defaultRPCInfraResponseHandler,
		UserPolicyDecisionPointAdapter:        defaultUserPolicyDecisionPointAdapter,
		AccountUserPolicyDecisionPointAdapter: defaultAccountUserPolicyDecisionPointAdapter,
	}
	httpPolicyEnforcementPoint, err := pep.ProvideHTTPPolicyEnforcementPoint(httpPolicyEnforcementPointOptions)
	if err != nil {
		return nil, err
	}
	rpcPolicyEnforcementPointOptions := pep.RPCPolicyEnforcementPointOptions{
		ResponseHandler:                       defaultRPCInfraResponseHandler,
		UserPolicyDecisionPointAdapter:        defaultUserPolicyDecisionPointAdapter,
		AccountUserPolicyDecisionPointAdapter: defaultAccountUserPolicyDecisionPointAdapter,
	}
	rpcPolicyEnforcementPoint, err := pep.ProvideRPCPolicyEnforcementPoint(rpcPolicyEnforcementPointOptions)
	if err != nil {
		return nil, err
	}
	authorizationMiddlewareOptions := authorization.AuthorizationMiddlewareOptions{
		HTTPPolicyEnforcementPoint: httpPolicyEnforcementPoint,
		RPCPolicyEnforcementPoint:  rpcPolicyEnforcementPoint,
	}
	authorizationMiddleware, err := authorization.ProvideAuthorizationMiddleware(authorizationMiddlewareOptions)
	if err != nil {
		return nil, err
	}
	rpcBatchRequestSupportMiddlewareOptions := rpcbatchrequestsupport.RPCBatchRequestSupportMiddlewareOptions{
		ResponseHandler: defaultRPCInfraResponseHandler,
		RPCRouter:       defaultRPCRouter,
	}
	rpcBatchRequestSupportMiddleware, err := rpcbatchrequestsupport.ProvideRPCBatchRequestSupportMiddleware(rpcBatchRequestSupportMiddlewareOptions)
	if err != nil {
		return nil, err
	}
	httpContextTracerOptions := tracer.HTTPContextTracerOptions{}
	httpContextTracer, err := tracer.ProvideHTTPContextTracer(httpContextTracerOptions)
	if err != nil {
		return nil, err
	}
	telemetryMiddlewareOptions := telemetry.TelemetryMiddlewareOptions{
		HTTPContextTracer: httpContextTracer,
	}
	telemetryMiddleware, err := telemetry.ProvideTelemetryMiddleware(telemetryMiddlewareOptions)
	if err != nil {
		return nil, err
	}
	rpcMiddlewareFactoryOptions := middleware.RPCMiddlewareFactoryOptions{
		AuthenticationMiddleware:         authenticationMiddleware,
		AuthorizationMiddleware:          authorizationMiddleware,
		RPCBatchRequestSupportMiddleware: rpcBatchRequestSupportMiddleware,
		TelemetryMiddleware:              telemetryMiddleware,
	}
	rpcMiddlewareFactory, err := middleware.ProvideRPCMiddlewareFactory(rpcMiddlewareFactoryOptions)
	if err != nil {
		return nil, err
	}
	graphRpcMiddlewareGraph := &rpcMiddlewareGraph{
		RPCMiddlewareFactory: rpcMiddlewareFactory,
	}
	return graphRpcMiddlewareGraph, nil
}

// Injectors from repositories_injector.go:

func InitializeRepositories(persistenceFramework persistence.Storage) (*repositoriesGraph, error) {
	applicationRepositoryInfraOptions := applicationdb.ApplicationRepositoryInfraOptions{
		GenericStorage: persistenceFramework,
	}
	applicationRepositoryInfra, err := applicationdb.ProvideApplicationRepositoryInfra(applicationRepositoryInfraOptions)
	if err != nil {
		return nil, err
	}
	repositoryOptions := applicationdbout.RepositoryOptions{
		Infra: applicationRepositoryInfra,
	}
	repository, err := applicationdbout.NewRepository(repositoryOptions)
	if err != nil {
		return nil, err
	}
	userRepositoryInfraOptions := userdb.UserRepositoryInfraOptions{
		GenericStorage: persistenceFramework,
	}
	userRepositoryInfra, err := userdb.ProvideUserRepositoryInfra(userRepositoryInfraOptions)
	if err != nil {
		return nil, err
	}
	userdboutRepositoryOptions := userdbout.RepositoryOptions{
		Infra: userRepositoryInfra,
	}
	userdboutRepository, err := userdbout.NewRepository(userdboutRepositoryOptions)
	if err != nil {
		return nil, err
	}
	accountRepositoryInfraOptions := accountdb.AccountRepositoryInfraOptions{
		GenericStorage: persistenceFramework,
	}
	accountRepositoryInfra, err := accountdb.ProvideAccountRepositoryInfra(accountRepositoryInfraOptions)
	if err != nil {
		return nil, err
	}
	accountdboutRepositoryOptions := accountdbout.RepositoryOptions{
		Infra: accountRepositoryInfra,
	}
	accountdboutRepository, err := accountdbout.NewRepository(accountdboutRepositoryOptions)
	if err != nil {
		return nil, err
	}
	adminRepositoryInfraOptions := admindb.AdminRepositoryInfraOptions{
		GenericStorage: persistenceFramework,
	}
	adminRepositoryInfra := admindb.ProvideAdminRepositoryInfra(adminRepositoryInfraOptions)
	admindboutRepositoryOptions := admindbout.RepositoryOptions{
		Infra: adminRepositoryInfra,
	}
	admindboutRepository, err := admindbout.NewRepository(admindboutRepositoryOptions)
	if err != nil {
		return nil, err
	}
	hardwareSecurityModuleRepositoryInfraOptions := hsmmoduledb.HardwareSecurityModuleRepositoryInfraOptions{
		GenericStorage: persistenceFramework,
	}
	hardwareSecurityModuleRepositoryInfra, err := hsmmoduledb.ProvideHardwareSecurityModuleRepositoryInfra(hardwareSecurityModuleRepositoryInfraOptions)
	if err != nil {
		return nil, err
	}
	hsmdboutRepositoryOptions := hsmdbout.RepositoryOptions{
		Infra: hardwareSecurityModuleRepositoryInfra,
	}
	hsmdboutRepository, err := hsmdbout.NewRepository(hsmdboutRepositoryOptions)
	if err != nil {
		return nil, err
	}
	hsmSlotRepositoryInfraOptions := hsmslotdb.HSMSlotRepositoryInfraOptions{
		GenericStorage: persistenceFramework,
	}
	hsmSlotRepositoryInfra, err := hsmslotdb.ProvideHSMSlotRepositoryInfra(hsmSlotRepositoryInfraOptions)
	if err != nil {
		return nil, err
	}
	hsmslotdboutRepositoryOptions := hsmslotdbout.RepositoryOptions{
		Infra: hsmSlotRepositoryInfra,
	}
	hsmslotdboutRepository, err := hsmslotdbout.NewRepository(hsmslotdboutRepositoryOptions)
	if err != nil {
		return nil, err
	}
	referentialIntegrityEntryRepositoryInfraOptions := referentialintegritydb.ReferentialIntegrityEntryRepositoryInfraOptions{
		GenericStorage: persistenceFramework,
	}
	referentialIntegrityEntryRepositoryInfra, err := referentialintegritydb.ProvideReferentialIntegrityEntryRepositoryInfra(referentialIntegrityEntryRepositoryInfraOptions)
	if err != nil {
		return nil, err
	}
	referentialintegritydboutRepositoryOptions := referentialintegritydbout.RepositoryOptions{
		Infra: referentialIntegrityEntryRepositoryInfra,
	}
	referentialintegritydboutRepository, err := referentialintegritydbout.NewRepository(referentialintegritydboutRepositoryOptions)
	if err != nil {
		return nil, err
	}
	transactionalRepositoryOptions := transactionaldbout.TransactionalRepositoryOptions{
		Storage: persistenceFramework,
	}
	transactionalRepository := transactionaldbout.NewTransactionalRepository(transactionalRepositoryOptions)
	graphRepositoriesGraph := &repositoriesGraph{
		applicationStorage:          repository,
		userStorage:                 userdboutRepository,
		accountStorage:              accountdboutRepository,
		adminStorage:                admindboutRepository,
		hsmStorage:                  hsmdboutRepository,
		hsmSlotStorage:              hsmslotdboutRepository,
		referentialIntegrityStorage: referentialintegritydboutRepository,
		transactionalStorage:        transactionalRepository,
	}
	return graphRepositoriesGraph, nil
}

// Injectors from usecases_injector.go:

func initializeUseCases(repositories *repositoriesGraph, metricRecorder metricrecorder.MetricRecorder, config Config) (*useCasesGraph, error) {
	applicationStorage := repositories.applicationStorage
	referentialIntegrityStorage := repositories.referentialIntegrityStorage
	defaultUseCaseOptions := referentialintegrity.DefaultUseCaseOptions{
		Storage: referentialIntegrityStorage,
	}
	defaultUseCase, err := referentialintegrity.ProvideDefaultUseCase(defaultUseCaseOptions)
	if err != nil {
		return nil, err
	}
	applicationDefaultUseCaseOptions := application.DefaultUseCaseOptions{
		Storage:                     applicationStorage,
		ReferentialIntegrityUseCase: defaultUseCase,
	}
	applicationDefaultUseCase, err := application.ProvideDefaultUseCase(applicationDefaultUseCaseOptions)
	if err != nil {
		return nil, err
	}
	userStorage := repositories.userStorage
	accountStorage := repositories.accountStorage
	hsmModuleStorage := repositories.hsmStorage
	hsmmoduleDefaultUseCaseOptions := hsmmodule.DefaultUseCaseOptions{
		HSMModuleStorage:            hsmModuleStorage,
		ReferentialIntegrityUseCase: defaultUseCase,
	}
	hsmmoduleDefaultUseCase, err := hsmmodule.ProvideDefaultHSMModuleUseCase(hsmmoduleDefaultUseCaseOptions)
	if err != nil {
		return nil, err
	}
	transactionalStorage := repositories.transactionalStorage
	transactionalManagerOptions := transactionalmanager.TransactionalManagerOptions{
		TransactionalStorage: transactionalStorage,
	}
	transactionalManager := transactionalmanager.ProvideTransactionalManager(transactionalManagerOptions)
	defaultUseCaseTransactionalDecoratorOptions := hsmmodule.DefaultUseCaseTransactionalDecoratorOptions{
		DefaultUseCase:       hsmmoduleDefaultUseCase,
		TransactionalManager: transactionalManager,
	}
	defaultUseCaseTransactionalDecorator, err := hsmmodule.ProvideDefaultUseCaseTransactionalDecorator(defaultUseCaseTransactionalDecoratorOptions)
	if err != nil {
		return nil, err
	}
	hsmSlotStorage := repositories.hsmSlotStorage
	pkcs11Library := provideSoftHSMConfiguration(config)
	defaultDigitalSignatureManagerFactoryOptions := hsmconnector.DefaultDigitalSignatureManagerFactoryOptions{
		SoftHSMLibrary: pkcs11Library,
	}
	defaultDigitalSignatureManagerFactory, err := hsmconnector.ProvideDefaultDigitalSignatureManagerFactory(defaultDigitalSignatureManagerFactoryOptions)
	if err != nil {
		return nil, err
	}
	hsmconnectorDefaultUseCaseOptions := hsmconnector.DefaultUseCaseOptions{
		DigitalSignatureManagerFactory: defaultDigitalSignatureManagerFactory,
	}
	hsmconnectorDefaultUseCase, err := hsmconnector.ProvideDefaultHSMConnector(hsmconnectorDefaultUseCaseOptions)
	if err != nil {
		return nil, err
	}
	hsmslotDefaultUseCaseOptions := hsmslot.DefaultUseCaseOptions{
		HSMSlotStorage:              hsmSlotStorage,
		ApplicationUseCase:          applicationDefaultUseCase,
		HSMModuleUseCase:            defaultUseCaseTransactionalDecorator,
		HSMConnector:                hsmconnectorDefaultUseCase,
		ReferentialIntegrityUseCase: defaultUseCase,
	}
	hsmslotDefaultUseCase, err := hsmslot.ProvideDefaultUseCase(hsmslotDefaultUseCaseOptions)
	if err != nil {
		return nil, err
	}
	hsmslotDefaultUseCaseTransactionalDecoratorOptions := hsmslot.DefaultUseCaseTransactionalDecoratorOptions{
		DefaultUseCase:       hsmslotDefaultUseCase,
		TransactionalManager: transactionalManager,
	}
	hsmslotDefaultUseCaseTransactionalDecorator, err := hsmslot.ProvideDefaultUseCaseTransactionalDecorator(hsmslotDefaultUseCaseTransactionalDecoratorOptions)
	if err != nil {
		return nil, err
	}
	defaultHSMConnectionResolverOptions := hsmconnection.DefaultHSMConnectionResolverOptions{
		ModuleUseCase:      defaultUseCaseTransactionalDecorator,
		SlotUseCase:        hsmslotDefaultUseCaseTransactionalDecorator,
		ApplicationUseCase: applicationDefaultUseCase,
	}
	defaultHSMConnectionResolver, err := hsmconnection.ProvideDefaultHSMConnectionResolver(defaultHSMConnectionResolverOptions)
	if err != nil {
		return nil, err
	}
	roleStorage := provideDefaultRoleStorageInFile()
	defaultRoleUseCaseOptions := role.DefaultRoleUseCaseOptions{
		RoleStorage: roleStorage,
	}
	defaultRoleUseCase, err := role.ProvideDefaultRoleUseCase(defaultRoleUseCaseOptions)
	if err != nil {
		return nil, err
	}
	defaultUserUseCaseOptions := user.DefaultUserUseCaseOptions{
		Storage:                     userStorage,
		AccountStorage:              accountStorage,
		ApplicationUseCase:          applicationDefaultUseCase,
		HSMConnectionResolver:       defaultHSMConnectionResolver,
		HSMConnector:                hsmconnectorDefaultUseCase,
		ReferentialIntegrityUseCase: defaultUseCase,
		RoleUseCase:                 defaultRoleUseCase,
	}
	defaultUserUseCase, err := user.ProvideDefaultUseCase(defaultUserUseCaseOptions)
	if err != nil {
		return nil, err
	}
	adminStorage := repositories.adminStorage
	adminDefaultUseCaseOptions := admin.DefaultUseCaseOptions{
		AdminStorage:                adminStorage,
		RoleUseCase:                 defaultRoleUseCase,
		ReferentialIntegrityUseCase: defaultUseCase,
	}
	adminDefaultUseCase, err := admin.ProvideDefaultUseCase(adminDefaultUseCaseOptions)
	if err != nil {
		return nil, err
	}
	graphUseCasesGraph := &useCasesGraph{
		ApplicationUseCase:             applicationDefaultUseCase,
		UserUseCase:                    defaultUserUseCase,
		AccountUseCase:                 defaultUserUseCase,
		AdminUseCase:                   adminDefaultUseCase,
		HSMModuleUseCase:               defaultUseCaseTransactionalDecorator,
		HSMSlotUseCase:                 hsmslotDefaultUseCaseTransactionalDecorator,
		HSMConnector:                   hsmconnectorDefaultUseCase,
		RoleUseCase:                    defaultRoleUseCase,
		HSMConnectionResolver:          defaultHSMConnectionResolver,
		ReferentialIntegrityUseCase:    defaultUseCase,
		TransactionalManagerUseCase:    transactionalManager,
		DigitalSignatureManagerFactory: defaultDigitalSignatureManagerFactory,
	}
	return graphUseCasesGraph, nil
}

// http_api_injector.go:

type httpAPIGraph struct {
	// REST
	adminAPIRoutesPublished       httpinfra.AdminAPIRoutesPublished
	applicationAPIRoutesPublished httpinfra.ApplicationAPIRoutesPublished

	// JSON-RPC
	rpcAPIRoutesPublished rpcinfra.JSONRPCAPIRoutesPublished
}

var httpAPISet = wire.NewSet(wire.Struct(new(httpAPIGraph), "*"), provideMainRouter, httpin.ProvideDefaultAdminAPIAdapter, wire.Bind(new(httpinfra.AdminAPIAdapter), new(*httpin.DefaultAdminAPIAdapter)), wire.Struct(new(httpin.DefaultAdminAPIAdapterOptions), "*"), httpinfra.NewDefaultAdminAPIHTTPHandler, wire.Bind(new(httpinfra.AdminAPIHTTPHandler), new(*httpinfra.DefaultAdminAPIHTTPHandler)), wire.Struct(new(httpinfra.DefaultAdminAPIHTTPHandlerOptions), "*"), httpinfra.ProvideAdminAPIRoutes, wire.Bind(new(httpinfra2.HTTPRouter), new(*httpinfra2.DefaultHTTPRouter)), wire.Struct(new(httpinfra.AdminAPIPublisherOptions), "*"), httpin.ProvideDefaultApplicationAPIAdapter, wire.Bind(new(httpinfra.ApplicationAPIAdapter), new(*httpin.DefaultApplicationAPIAdapter)), wire.Struct(new(httpin.DefaultApplicationAPIAdapterOptions), "*"), httpinfra.NewDefaultApplicationAPIHTTPHandler, wire.Bind(new(httpinfra.ApplicationAPIHTTPHandler), new(*httpinfra.DefaultApplicationAPIHTTPHandler)), wire.Struct(new(httpinfra.DefaultApplicationAPIHTTPHandlerOptions), "*"), httpinfra.ProvideApplicationAPIRoutes, wire.Struct(new(httpinfra.ApplicationAPIPublisherOptions), "*"), rpcin.NewDefaultAPIAdapter, wire.Bind(new(rpcinfra.JSONRPCAPIAdapter), new(*rpcin.DefaultAPIAdapter)), wire.Struct(new(rpcin.DefaultAPIAdapterOptions), "*"), rpcinfra.NewDefaultJSONRPCAPIHandler, wire.Bind(new(rpcinfra.JSONRPCAPIHandler), new(*rpcinfra.DefaultJSONRPCAPIHandler)), wire.Struct(new(rpcinfra.DefaultJSONRPCAPIHandlerOptions), "*"), rpcinfra.ProvideJSONRPCMethods, wire.Struct(new(rpcinfra.JSONRPCAPIPublisherOptions), "*"))

func provideMainRouter(infra *infraGraph) *httpinfra2.DefaultHTTPRouter {
	return infra.mainHTTPRouter
}

func (g *httpAPIGraph) publishMetricsHTTPListeners(config PrometheusConfig, infra infraGraph) error {
	options := metricshttpinfra.PrometheusMetricsHTTPOptions{
		HTTPInfra: infra.metricsHTTPRouter,
		PrometheusConfig: metricshttpinfra.PrometheusConfig{
			Path:                config.Path,
			MaxRequestsInFlight: config.MaxRequestsInFlight,
			TimeoutInMillis:     config.TimeoutInMillis,
		},
	}
	_, err := metricshttpinfra.ProvideMetricsHTTP(options)
	if err != nil {
		return err
	}
	return nil
}

// infra_injector.go:

type infraGraph struct {
	httpAPIResponseHandler         httpinfra2.HTTPResponseHandler
	defaultRPCInfraResponseHandler *rpcinfra.DefaultRPCInfraResponseHandler
	mainHTTPRouter                 *httpinfra2.DefaultHTTPRouter
	metricsHTTPRouter              *httpinfra2.MetricsHTTPRouter
	rpcRouter                      *rpcinfra.DefaultRPCRouter
}

var infraSet = wire.NewSet(wire.Struct(new(infraGraph), "*"), httpinfra2.ProvideHTTPRouter, httpinfra2.ProvideMetricsHTTPRouter, httpinfra2.ProvideDefaultHTTPMetrics, wire.Bind(new(httpinfra2.HTTPMetrics), new(*httpinfra2.DefaultHTTPMetrics)), wire.Struct(new(httpinfra2.DefaultHTTPMetricsOptions), "*"), httpinfra2.ProvideDefaultHTTPResponseHandler, wire.Bind(new(httpinfra2.HTTPResponseHandler), new(*httpinfra2.DefaultHTTPResponseHandler)), wire.Struct(new(httpinfra2.DefaultHTTPResponseHandlerOptions), "*"), rpcinfra.ProvideDefaultRPCInfraResponseHandler, wire.Struct(new(rpcinfra.DefaultRPCInfraResponseHandlerOptions), "*"), rpcinfra.ProvideDefaultRPCRouter, wire.Struct(new(rpcinfra.DefaultRPCRouterOptions), "*"))

// libraries_injector.go:

type librariesGraph struct {
	persistenceFramework  persistence.Storage
	persistenceConnection sql.Connection
}

var librariesSet = wire.NewSet(wire.Struct(new(librariesGraph), "*"), providePersistenceFramework,
	providePersistenceFwConnection, wire.Struct(new(persistenceFwConfigOptions), "*"), providePersistenceFwConfig,
)

type persistenceFwConfigOptions struct {
	config Config
}

func providePersistenceFramework(connection sql.Connection, fwOptions sql.FwOptions) (persistence.Storage, error) {
	persistenceFw, err := sql.NewPersistenceFw(fwOptions)
	if err != nil {
		return nil, err
	}

	configOptions := persistence.StorageConfigOptions{
		ReadDirAndFileFS: app.DatabaseMappers,
		Driver:           connection.GetDialectName(),
	}

	config, err := persistence.NewStorageConfig(configOptions)
	if err != nil {
		return nil, err
	}

	err = persistenceFw.AddConfig(*config)
	if err != nil {
		return nil, err
	}

	return persistenceFw, nil
}

func providePersistenceFwConnection(options persistenceFwConfigOptions) (sql.Connection, error) {
	configs := 0
	databaseInfo := options.config.Libraries.PersistenceFw
	if databaseInfo.SQLite != nil {
		configs++
	}
	if databaseInfo.PostgreSQL != nil {
		configs++
	}
	if configs > 1 {
		return nil, errors.New("only one database can be configured at the same time")
	}

	connectionFwOptions := sql.ConnectionFwOptions{}
	if databaseInfo.PostgreSQL != nil {
		postgresConfig := sql.PostgresInfo{
			Host:     options.config.Libraries.PersistenceFw.PostgreSQL.Host,
			Port:     *options.config.Libraries.PersistenceFw.PostgreSQL.Port,
			Scheme:   *options.config.Libraries.PersistenceFw.PostgreSQL.Scheme,
			Username: options.config.Libraries.PersistenceFw.PostgreSQL.Username,
			Password: options.config.Libraries.PersistenceFw.PostgreSQL.Password,
			SSLMode:  options.config.Libraries.PersistenceFw.PostgreSQL.SSLMode,
			Database: options.config.Libraries.PersistenceFw.PostgreSQL.Database,
		}
		connectionFwOptions.Postgres = &postgresConfig
	} else if databaseInfo.SQLite != nil {
		file, err := os.CreateTemp("", strings.ReplaceAll(time.Now().String(), " ", ""))
		if err != nil {
			return nil, err
		}
		connectionFwOptions.SQLite = &sql.SQLiteInfo{
			ConnectionString: file.Name(),
		}
	} else {
		return nil, errors.New("no valid database configuration")
	}

	conn, err := sql.NewConnectionFw(connectionFwOptions)
	if err != nil {
		return sql.ConnectionFw{}, err
	}
	return conn, nil
}

func providePersistenceFwConfig(conn sql.Connection, options persistenceFwConfigOptions) (sql.FwOptions, error) {
	fwOptions := sql.FwOptions{
		Connection: conn,
	}
	if options.config.Libraries.PersistenceFw.PostgreSQL == nil || options.config.Libraries.PersistenceFw.PostgreSQL.SQLClient == nil {
		return fwOptions, nil
	}
	fwOptions.SQLClientParameters = sql.SQLClientParameters{
		MaxIdleConnections:    options.config.Libraries.PersistenceFw.PostgreSQL.SQLClient.MaxIdleConnections,
		MaxOpenConnections:    options.config.Libraries.PersistenceFw.PostgreSQL.SQLClient.MaxOpenConnections,
		MaxConnectionLifetime: options.config.Libraries.PersistenceFw.PostgreSQL.SQLClient.MaxConnectionLifetime,
	}

	return fwOptions, nil
}

func (l *librariesGraph) provideLogger(config Config) error {
	if config.Libraries.Logger == nil || config.Libraries.Logger.LogLevel == nil {
		return nil
	}
	logLevel := *config.Libraries.Logger.LogLevel
	level, ok := logger.ToLevel(logLevel)
	if !ok {
		return fmt.Errorf("level %s not defined", logLevel)
	}
	opts := logger.Options{
		Level:     level,
		LogOutput: os.Stdout,

		CtxKeysRegistry: map[entities.ContextKey]logger.LogKey{requestcontext.TraceParentTraceIDContextKey: "trace.id", requestcontext.TraceParentSpanIDContextKey: "span.id", requestcontext.RPCRequestIDKey: "rpc.request.id"},
	}
	logger.RegisterLogger(opts)
	return nil
}

// metrics_injector.go:

type prometheusMetricsGraph struct {
	metricRecorderAdapter metricrecorder.MetricsRecorderAdapter
	metricRecorder        metricrecorder.MetricRecorder
}

var prometheusMetricsSet = wire.NewSet(wire.Struct(new(prometheusMetricsGraph), "*"), metricrecorder.ProvideDefaultMetricRecorder, wire.Bind(new(metricrecorder.MetricRecorder), new(*metricrecorder.DefaultMetricRecorder)), wire.Struct(new(metricrecorder.DefaultMetricRecorderOptions), "MetricsRecorderAdapter"), metricsout.ProvidePrometheusMetricsRecorderAdapter, providePrometheusNamespace, wire.Struct(new(metricsout.PrometheusMetricsRecorderAdapterOptions), "*"), wire.Bind(new(metricrecorder.MetricsRecorderAdapter), new(*metricsout.PrometheusMetricsRecorderAdapter)))

func providePrometheusNamespace(config Config) *metricsout.PrometheusNamespace {
	if config.Libraries.Metrics != nil && config.Libraries.Metrics.Prometheus.Namespace != nil {
		ns := metricsout.PrometheusNamespace(*config.Libraries.Metrics.Prometheus.Namespace)
		return &ns
	}
	return nil
}

type dummyMetricsGraph struct {
	metricRecorder metricrecorder.MetricRecorder
}

var dummyMetricsSet = wire.NewSet(wire.Struct(new(dummyMetricsGraph), "*"), metricrecorder.NewNoMetricsRecorder, wire.Bind(new(metricrecorder.MetricRecorder), new(*metricrecorder.NoMetricsRecorder)))

// middleware_injector.go:

func ProvidePolicyInformationPointYAMLOutputAdapter() *pipinfile.DefaultRBACActionsPolicyInformationPointYAMLOutputAdapter {
	policyDecisionPointOutputAdapterOptions := pipinfile.DefaultRBACActionsPolicyInformationPointYAMLOutputAdapterOptions{
		FileSystem: app.RBACFiles,
		BasePath:   "include/rbac",
	}
	policyInformationPointOutputAdapter, err := pipinfile.ProvideDefaultRBACActionsPolicyInformationPointYAMLOutputAdapter(policyDecisionPointOutputAdapterOptions)
	checkError(err)

	return policyInformationPointOutputAdapter
}

type httpMiddlewareGraph struct {
	HTTPMiddlewareFactory *middleware.HTTPMiddlewareFactory
}

var httpMiddlewareSet = wire.NewSet(wire.Struct(new(httpMiddlewareGraph), "*"), httpcontextdefinition.ProvideHTTPContextDefinition, wire.Bind(new(contextdefinition.ContextDefinition), new(*httpcontextdefinition.HTTPContextDefinition)), wire.Struct(new(httpcontextdefinition.HTTPContextDefinitionOptions), "*"), contextvalidation.ProvideRequestContextValidation, wire.Struct(new(contextvalidation.RequestContextValidationOptions), "*"), pip.ProvideDefaultAccountsPIPAdapter, wire.Bind(new(pdp.AccountsPolicyInformationPort), new(*pip.DefaultAccountsPIPAdapter)), wire.Struct(new(pip.DefaultAccountsPIPAdapterOptions), "*"), pip.ProvideDefaultAdminsPIPAdapter, wire.Bind(new(pdp.AdminsPolicyInformationPort), new(*pip.DefaultAdminsPIPAdapter)), wire.Struct(new(pip.DefaultAdminsPIPAdapterOptions), "*"), ProvidePolicyInformationPointYAMLOutputAdapter, wire.Bind(new(pdp.ActionsPolicyInformationPointPort), new(*pipinfile.DefaultRBACActionsPolicyInformationPointYAMLOutputAdapter)), pip.ProvideDefaultUsersPIPAdapter, wire.Bind(new(pdp.UsersPolicyInformationPort), new(*pip.DefaultUsersPIPAdapter)), wire.Struct(new(pip.DefaultUsersPIPAdapterOptions), "*"), pdp.ProvideDefaultPolicyDecisionPointUseCase, wire.Bind(new(pdp.PolicyDecisionPointUseCase), new(*pdp.DefaultPolicyDecisionPointUseCase)), wire.Struct(new(pdp.DefaultPolicyDecisionPointUseCaseOptions), "*"), pepin.ProvideUserPolicyDecisionPointAdapter, wire.Bind(new(pep.UserPolicyDecisionPointPort), new(*pepin.DefaultUserPolicyDecisionPointAdapter)), wire.Struct(new(pepin.DefaultUserPolicyDecisionPointAdapterOptions), "*"), pepin.ProvideDefaultAccountUserPolicyDecisionPointAdapter, wire.Bind(new(pep.AccountUserPolicyDecisionPointPort), new(*pepin.DefaultAccountUserPolicyDecisionPointAdapter)), wire.Struct(new(pepin.DefaultAccountUserPolicyDecisionPointAdapterOptions), "*"), pep.ProvideHTTPPolicyEnforcementPoint, wire.Struct(new(pep.HTTPPolicyEnforcementPointOptions), "*"), pep.ProvideRPCPolicyEnforcementPoint, wire.Struct(new(pep.RPCPolicyEnforcementPointOptions), "*"), authorization.ProvideAuthorizationMiddleware, wire.Struct(new(authorization.AuthorizationMiddlewareOptions), "*"), authentication.ProvideAuthenticationMiddleware, wire.Struct(new(authentication.AuthenticationMiddlewareOptions), "*"), middleware.ProvideHTTPMiddlewareFactory, wire.Struct(new(middleware.HTTPMiddlewareFactoryOptions), "*"), telemetry.ProvideTelemetryMiddleware, wire.Struct(new(telemetry.TelemetryMiddlewareOptions), "*"), tracer.ProvideHTTPContextTracer, wire.Struct(new(tracer.HTTPContextTracerOptions), "*"))

type rpcMiddlewareGraph struct {
	RPCMiddlewareFactory *middleware.RPCMiddlewareFactory
}

var rpcMiddlewareSet = wire.NewSet(wire.Struct(new(rpcMiddlewareGraph), "*"), contextvalidation.ProvideRequestContextValidation, wire.Struct(new(contextvalidation.RequestContextValidationOptions), "*"), rpccontextdefinition.ProvideRPCContextDefinitionFromHeaders, wire.Bind(new(contextdefinition.ContextDefinition), new(*rpccontextdefinition.RPCContextDefinition)), wire.Struct(new(rpccontextdefinition.RPCContextDefinitionOptions), "*"), pip.ProvideDefaultAccountsPIPAdapter, wire.Bind(new(pdp.AccountsPolicyInformationPort), new(*pip.DefaultAccountsPIPAdapter)), wire.Struct(new(pip.DefaultAccountsPIPAdapterOptions), "*"), pip.ProvideDefaultAdminsPIPAdapter, wire.Bind(new(pdp.AdminsPolicyInformationPort), new(*pip.DefaultAdminsPIPAdapter)), wire.Struct(new(pip.DefaultAdminsPIPAdapterOptions), "*"), ProvidePolicyInformationPointYAMLOutputAdapter, wire.Bind(new(pdp.ActionsPolicyInformationPointPort), new(*pipinfile.DefaultRBACActionsPolicyInformationPointYAMLOutputAdapter)), pip.ProvideDefaultUsersPIPAdapter, wire.Bind(new(pdp.UsersPolicyInformationPort), new(*pip.DefaultUsersPIPAdapter)), wire.Struct(new(pip.DefaultUsersPIPAdapterOptions), "*"), pdp.ProvideDefaultPolicyDecisionPointUseCase, wire.Bind(new(pdp.PolicyDecisionPointUseCase), new(*pdp.DefaultPolicyDecisionPointUseCase)), wire.Struct(new(pdp.DefaultPolicyDecisionPointUseCaseOptions), "*"), pepin.ProvideUserPolicyDecisionPointAdapter, wire.Bind(new(pep.UserPolicyDecisionPointPort), new(*pepin.DefaultUserPolicyDecisionPointAdapter)), wire.Struct(new(pepin.DefaultUserPolicyDecisionPointAdapterOptions), "*"), pepin.ProvideDefaultAccountUserPolicyDecisionPointAdapter, wire.Bind(new(pep.AccountUserPolicyDecisionPointPort), new(*pepin.DefaultAccountUserPolicyDecisionPointAdapter)), wire.Struct(new(pepin.DefaultAccountUserPolicyDecisionPointAdapterOptions), "*"), pep.ProvideHTTPPolicyEnforcementPoint, wire.Struct(new(pep.HTTPPolicyEnforcementPointOptions), "*"), pep.ProvideRPCPolicyEnforcementPoint, wire.Struct(new(pep.RPCPolicyEnforcementPointOptions), "*"), authorization.ProvideAuthorizationMiddleware, wire.Struct(new(authorization.AuthorizationMiddlewareOptions), "*"), authentication.ProvideAuthenticationMiddleware, wire.Struct(new(authentication.AuthenticationMiddlewareOptions), "*"), rpcbatchrequestsupport.ProvideRPCBatchRequestSupportMiddleware, wire.Struct(new(rpcbatchrequestsupport.RPCBatchRequestSupportMiddlewareOptions), "*"), middleware.ProvideRPCMiddlewareFactory, wire.Struct(new(middleware.RPCMiddlewareFactoryOptions), "*"), telemetry.ProvideTelemetryMiddleware, wire.Struct(new(telemetry.TelemetryMiddlewareOptions), "*"), tracer.ProvideHTTPContextTracer, wire.Struct(new(tracer.HTTPContextTracerOptions), "*"))

// repositories_injector.go:

type repositoriesGraph struct {
	applicationStorage          application.ApplicationStorage
	userStorage                 user.UserStorage
	accountStorage              user.AccountStorage
	adminStorage                admin.AdminStorage
	hsmStorage                  hsmmodule.HSMModuleStorage
	hsmSlotStorage              hsmslot.HSMSlotStorage
	referentialIntegrityStorage referentialintegrity.ReferentialIntegrityStorage
	transactionalStorage        transactionalmanager.TransactionalStorage
}

var repositoriesSet = wire.NewSet(wire.Struct(new(repositoriesGraph), "*"), applicationdb.ProvideApplicationRepositoryInfra, wire.Struct(new(applicationdb.ApplicationRepositoryInfraOptions), "*"), applicationdbout.NewRepository, wire.Bind(new(application.ApplicationStorage), new(*applicationdbout.Repository)), wire.Struct(new(applicationdbout.RepositoryOptions), "*"), userdb.ProvideUserRepositoryInfra, wire.Struct(new(userdb.UserRepositoryInfraOptions), "*"), userdbout.NewRepository, wire.Bind(new(user.UserStorage), new(*userdbout.Repository)), wire.Struct(new(userdbout.RepositoryOptions), "*"), accountdb.ProvideAccountRepositoryInfra, wire.Struct(new(accountdb.AccountRepositoryInfraOptions), "*"), accountdbout.NewRepository, wire.Bind(new(user.AccountStorage), new(*accountdbout.Repository)), wire.Struct(new(accountdbout.RepositoryOptions), "*"), admindb.ProvideAdminRepositoryInfra, wire.Struct(new(admindb.AdminRepositoryInfraOptions), "*"), admindbout.NewRepository, wire.Bind(new(admin.AdminStorage), new(*admindbout.Repository)), wire.Struct(new(admindbout.RepositoryOptions), "*"), hsmmoduledb.ProvideHardwareSecurityModuleRepositoryInfra, wire.Struct(new(hsmmoduledb.HardwareSecurityModuleRepositoryInfraOptions), "*"), hsmdbout.NewRepository, wire.Bind(new(hsmmodule.HSMModuleStorage), new(*hsmdbout.Repository)), wire.Struct(new(hsmdbout.RepositoryOptions), "*"), hsmslotdb.ProvideHSMSlotRepositoryInfra, wire.Struct(new(hsmslotdb.HSMSlotRepositoryInfraOptions), "*"), hsmslotdbout.NewRepository, wire.Bind(new(hsmslot.HSMSlotStorage), new(*hsmslotdbout.Repository)), wire.Struct(new(hsmslotdbout.RepositoryOptions), "*"), referentialintegritydb.ProvideReferentialIntegrityEntryRepositoryInfra, wire.Struct(new(referentialintegritydb.ReferentialIntegrityEntryRepositoryInfraOptions), "*"), referentialintegritydbout.NewRepository, wire.Bind(new(referentialintegrity.ReferentialIntegrityStorage), new(*referentialintegritydbout.Repository)), wire.Struct(new(referentialintegritydbout.RepositoryOptions), "*"), transactionaldbout.NewTransactionalRepository, wire.Bind(new(transactionalmanager.TransactionalStorage), new(*transactionaldbout.TransactionalRepository)), wire.Struct(new(transactionaldbout.TransactionalRepositoryOptions), "*"))

// usecases_injector.go:

type useCasesGraph struct {
	ApplicationUseCase          application.ApplicationUseCase
	UserUseCase                 user.UserUseCase
	AccountUseCase              user.AccountUseCase
	AdminUseCase                admin.AdminUseCase
	HSMModuleUseCase            hsmmodule.HSMModuleUseCase
	HSMSlotUseCase              hsmslot.HSMSlotUseCase
	HSMConnector                hsmconnector.HSMConnector
	RoleUseCase                 role.RoleUseCase
	HSMConnectionResolver       hsmconnection.Resolver
	ReferentialIntegrityUseCase referentialintegrity.ReferentialIntegrityUseCase
	TransactionalManagerUseCase transactionalmanager.TransactionalManagerUseCase

	DigitalSignatureManagerFactory hsmconnector.DigitalSignatureManagerFactory
}

var useCasesSet = wire.NewSet(wire.Struct(new(useCasesGraph), "*"), transactionalmanager.ProvideTransactionalManager, wire.Bind(new(transactionalmanager.TransactionalManagerUseCase), new(*transactionalmanager.TransactionalManager)), wire.Struct(new(transactionalmanager.TransactionalManagerOptions), "*"), referentialintegrity.ProvideDefaultUseCase, wire.Bind(new(referentialintegrity.ReferentialIntegrityUseCase), new(*referentialintegrity.DefaultUseCase)), wire.Struct(new(referentialintegrity.DefaultUseCaseOptions), "*"), application.ProvideDefaultUseCase, wire.Bind(new(application.ApplicationUseCase), new(*application.DefaultUseCase)), wire.Struct(new(application.DefaultUseCaseOptions), "*"), user.ProvideDefaultUseCase, wire.Bind(new(user.UserUseCase), new(*user.DefaultUserUseCase)), wire.Struct(new(user.DefaultUserUseCaseOptions), "*"), user.ProvideDefaultUseCaseTransactionalDecorator, wire.Bind(new(user.AccountUseCase), new(*user.DefaultUserUseCase)), wire.Struct(new(user.DefaultUseCaseTransactionalDecoratorOptions), "*"), admin.ProvideDefaultUseCase, wire.Bind(new(admin.AdminUseCase), new(*admin.DefaultUseCase)), wire.Struct(new(admin.DefaultUseCaseOptions), "*"), hsmmodule.ProvideDefaultUseCaseTransactionalDecorator, wire.Bind(new(hsmmodule.HSMModuleUseCase), new(*hsmmodule.DefaultUseCaseTransactionalDecorator)), wire.Struct(new(hsmmodule.DefaultUseCaseTransactionalDecoratorOptions), "*"), hsmmodule.ProvideDefaultHSMModuleUseCase, wire.Struct(new(hsmmodule.DefaultUseCaseOptions), "*"), hsmslot.ProvideDefaultUseCaseTransactionalDecorator, wire.Bind(new(hsmslot.HSMSlotUseCase), new(*hsmslot.DefaultUseCaseTransactionalDecorator)), wire.Struct(new(hsmslot.DefaultUseCaseTransactionalDecoratorOptions), "*"), hsmslot.ProvideDefaultUseCase, wire.Struct(new(hsmslot.DefaultUseCaseOptions), "*"), hsmconnector.ProvideDefaultHSMConnector, wire.Bind(new(hsmconnector.HSMConnector), new(*hsmconnector.DefaultUseCase)), wire.Struct(new(hsmconnector.DefaultUseCaseOptions), "*"), provideDefaultRoleStorageInFile, role.ProvideDefaultRoleUseCase, wire.Bind(new(role.RoleUseCase), new(*role.DefaultRoleUseCase)), wire.Struct(new(role.DefaultRoleUseCaseOptions), "*"), provideSoftHSMConfiguration, hsmconnector.ProvideDefaultDigitalSignatureManagerFactory, wire.Bind(new(hsmconnector.DigitalSignatureManagerFactory), new(*hsmconnector.DefaultDigitalSignatureManagerFactory)), wire.Struct(new(hsmconnector.DefaultDigitalSignatureManagerFactoryOptions), "*"), hsmconnection.ProvideDefaultHSMConnectionResolver, wire.Bind(new(hsmconnection.Resolver), new(*hsmconnection.DefaultHSMConnectionResolver)), wire.Struct(new(hsmconnection.DefaultHSMConnectionResolverOptions), "*"))

func provideSoftHSMConfiguration(config Config) *hsmconnector.PKCS11Library {
	if config.Libraries.HSMModules.SoftHSM != nil {
		softHSMConfig := hsmconnector.PKCS11Library(config.Libraries.HSMModules.SoftHSM.Library)
		return &softHSMConfig
	}
	return nil
}

func provideDefaultRoleStorageInFile() role.RoleStorage {
	defaultRoleStorageInFileOptions := roleinfile.DefaultRoleStorageInFileOptions{
		FileSystem: app.RBACFiles,
		BasePath:   "include/rbac",
	}
	defaultRoleStorageInFile, err := roleinfile.ProvideDefaultRoleStorageInFile(defaultRoleStorageInFileOptions)
	checkError(err)

	return defaultRoleStorageInFile
}
